// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SiliconSteppeDocuments.DB;

namespace SiliconSteppeDocuments.DB.Migrations
{
    [DbContext(typeof(SteppeContext))]
    partial class SteppeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("SiliconSteppeDocuments.Model.Answer", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsRight");

                    b.Property<long>("QuestionID");

                    b.Property<long?>("QuestionID1");

                    b.Property<string>("Text");

                    b.HasKey("ID");

                    b.HasIndex("QuestionID");

                    b.HasIndex("QuestionID1");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("SiliconSteppeDocuments.Model.ApplicationRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ConcurrencyStamp = "3050a7f8-000e-4bb3-a56b-1ef4577a2fc0",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2L,
                            ConcurrencyStamp = "b399f878-cae2-4fae-bc08-20a4e416f29d",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = 3L,
                            ConcurrencyStamp = "d7cdd1bc-f21f-4498-b5eb-eb28650ab3df",
                            Name = "Consultant",
                            NormalizedName = "CONSULTANT"
                        });
                });

            modelBuilder.Entity("SiliconSteppeDocuments.Model.ApplicationUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<long?>("DepartmentID");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("SiliconSteppeDocuments.Model.Department", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<long>("OrganizationID");

                    b.HasKey("ID");

                    b.HasIndex("OrganizationID");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("SiliconSteppeDocuments.Model.DetailResult", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("AnswerID");

                    b.Property<long>("QuestionnaireResultID");

                    b.Property<long?>("QuestionnaireResultID1");

                    b.HasKey("ID");

                    b.HasIndex("AnswerID");

                    b.HasIndex("QuestionnaireResultID");

                    b.HasIndex("QuestionnaireResultID1");

                    b.ToTable("DetailResults");
                });

            modelBuilder.Entity("SiliconSteppeDocuments.Model.InspectionType", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("InspectionTypes");
                });

            modelBuilder.Entity("SiliconSteppeDocuments.Model.Invite", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Description");

                    b.Property<DateTime>("EventDate");

                    b.Property<long>("InvitedUserID");

                    b.Property<long>("ResponsibleUserID");

                    b.HasKey("ID");

                    b.HasIndex("InvitedUserID");

                    b.HasIndex("ResponsibleUserID");

                    b.ToTable("Invites");
                });

            modelBuilder.Entity("SiliconSteppeDocuments.Model.Organization", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FullName");

                    b.Property<string>("INN");

                    b.Property<string>("Name")
                        .HasMaxLength(75);

                    b.Property<long>("OrganizationTypeID");

                    b.HasKey("ID");

                    b.HasIndex("OrganizationTypeID");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("SiliconSteppeDocuments.Model.OrganizationType", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("OrganizationTypes");
                });

            modelBuilder.Entity("SiliconSteppeDocuments.Model.Question", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("QuestionnaireID");

                    b.Property<long?>("QuestionnaireID1");

                    b.Property<string>("Text");

                    b.HasKey("ID");

                    b.HasIndex("QuestionnaireID");

                    b.HasIndex("QuestionnaireID1");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("SiliconSteppeDocuments.Model.Questionnaire", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("InspectionTypeID");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.HasIndex("InspectionTypeID");

                    b.ToTable("Questionnaire");
                });

            modelBuilder.Entity("SiliconSteppeDocuments.Model.QuestionnaireResult", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("EventDate");

                    b.Property<long>("QuestionnaireID");

                    b.Property<long>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("QuestionnaireID");

                    b.HasIndex("UserID");

                    b.ToTable("QuestionnaireResults");
                });

            modelBuilder.Entity("SiliconSteppeDocuments.Model.Rate", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("ApplicationUserId");

                    b.Property<DateTime>("EventDate");

                    b.Property<long>("FromUserID");

                    b.Property<long>("RateUserID");

                    b.Property<decimal>("Score");

                    b.HasKey("ID");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("FromUserID");

                    b.HasIndex("RateUserID");

                    b.ToTable("Rates");
                });

            modelBuilder.Entity("SiliconSteppeDocuments.Model.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("SiliconSteppeDocuments.Model.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<long>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("SiliconSteppeDocuments.Model.UserRole", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<long>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("SiliconSteppeDocuments.Model.UserRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<long>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("SiliconSteppeDocuments.Model.UserToken", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SiliconSteppeDocuments.Model.Answer", b =>
                {
                    b.HasOne("SiliconSteppeDocuments.Model.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SiliconSteppeDocuments.Model.Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionID1");
                });

            modelBuilder.Entity("SiliconSteppeDocuments.Model.ApplicationUser", b =>
                {
                    b.HasOne("SiliconSteppeDocuments.Model.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID");
                });

            modelBuilder.Entity("SiliconSteppeDocuments.Model.Department", b =>
                {
                    b.HasOne("SiliconSteppeDocuments.Model.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SiliconSteppeDocuments.Model.DetailResult", b =>
                {
                    b.HasOne("SiliconSteppeDocuments.Model.Answer", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerID");

                    b.HasOne("SiliconSteppeDocuments.Model.QuestionnaireResult", "QuestionnaireResult")
                        .WithMany()
                        .HasForeignKey("QuestionnaireResultID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SiliconSteppeDocuments.Model.QuestionnaireResult")
                        .WithMany("DetailResults")
                        .HasForeignKey("QuestionnaireResultID1");
                });

            modelBuilder.Entity("SiliconSteppeDocuments.Model.Invite", b =>
                {
                    b.HasOne("SiliconSteppeDocuments.Model.ApplicationUser", "InvitedUser")
                        .WithMany()
                        .HasForeignKey("InvitedUserID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SiliconSteppeDocuments.Model.ApplicationUser", "ResponsibleUser")
                        .WithMany()
                        .HasForeignKey("ResponsibleUserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SiliconSteppeDocuments.Model.Organization", b =>
                {
                    b.HasOne("SiliconSteppeDocuments.Model.OrganizationType", "OrganizationType")
                        .WithMany()
                        .HasForeignKey("OrganizationTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SiliconSteppeDocuments.Model.Question", b =>
                {
                    b.HasOne("SiliconSteppeDocuments.Model.Questionnaire", "Questionnaire")
                        .WithMany()
                        .HasForeignKey("QuestionnaireID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SiliconSteppeDocuments.Model.Questionnaire")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionnaireID1");
                });

            modelBuilder.Entity("SiliconSteppeDocuments.Model.Questionnaire", b =>
                {
                    b.HasOne("SiliconSteppeDocuments.Model.InspectionType", "InspectionType")
                        .WithMany()
                        .HasForeignKey("InspectionTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SiliconSteppeDocuments.Model.QuestionnaireResult", b =>
                {
                    b.HasOne("SiliconSteppeDocuments.Model.Questionnaire", "Questionnaire")
                        .WithMany()
                        .HasForeignKey("QuestionnaireID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SiliconSteppeDocuments.Model.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SiliconSteppeDocuments.Model.Rate", b =>
                {
                    b.HasOne("SiliconSteppeDocuments.Model.ApplicationUser")
                        .WithMany("Rates")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("SiliconSteppeDocuments.Model.ApplicationUser", "FromUser")
                        .WithMany()
                        .HasForeignKey("FromUserID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SiliconSteppeDocuments.Model.ApplicationUser", "RateUser")
                        .WithMany()
                        .HasForeignKey("RateUserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SiliconSteppeDocuments.Model.UserClaim", b =>
                {
                    b.HasOne("SiliconSteppeDocuments.Model.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SiliconSteppeDocuments.Model.UserLogin", b =>
                {
                    b.HasOne("SiliconSteppeDocuments.Model.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SiliconSteppeDocuments.Model.UserRole", b =>
                {
                    b.HasOne("SiliconSteppeDocuments.Model.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SiliconSteppeDocuments.Model.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SiliconSteppeDocuments.Model.UserRoleClaim", b =>
                {
                    b.HasOne("SiliconSteppeDocuments.Model.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SiliconSteppeDocuments.Model.UserToken", b =>
                {
                    b.HasOne("SiliconSteppeDocuments.Model.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
